package __数据类型
/*
变量的数据类型
基础数据类型：
   数值型：
		 整数类型（int,int8,int16,int32,int64,uint(无符号),uint8,uint16,uint32,uint64,byte）
				 int 和系统有关系，系统如果是32为的占4个字节，如果64位的占8个字节
		 浮点类型（float32,float63）
   字符型:没有专门的字符型，使用byte来保存单个字母字符
   布尔型：bool （true flase）
   字符串：string 官方将string归属到基本数据类型

派生/复杂数据类型：
	指针：pointer
	数组
	结构体:struct
	管道:channel
	函数:也是一种类型
	切片:slice
	接口：interface
	map


整型的使用细节 （int）
1.Golang各整数类型分：有符号和无符号，int uint的大小和系统有关
2.Golang的整型默认声明为int型
3.如何在程序查看某个变量的字节大小和数据类型
4.Golang程序中整型变量在使用时，遵守保小不保大的原则，即：在保证程序正确运行下，尽量使用占用空间小的数据类型。如年龄
5.bit 计算机中最小存储单位。byte 计算机中基本存储单位。



# 小数类型/浮点型 （float）

基本介绍：
	小数类型就是用于存放小数的，比如1.2 0.23 -1.911
案例演示：
	package main
	import (
		"fmt"
	)

	//演示golang中小数类型的使用
	func main() {
		var price float32 = 89.12
		fmt.Println("price=",price)
	}
浮点型分类：
	单精度：float32     4字节
	双精度：float64     8字节
	1.关于浮点数在机器中存放形式的简单说明，浮点数=符号位+指数位+尾数位
	2.尾数部分可能丢失，造成精度损失
	var num3 float32 = -123.00000901
	var num4 float64 = -123.00000901
	fmt.Println("num3=",num3,"num4=",num4)
	说明：float64的精度比float32的要准确，如果我们要保存一个精度高的数，则应该选择float64

浮点型使用细节：
	1.Golang浮点类型有固定的范围和字段长度，不受具体os操作系统的影响
	2.Golang的浮点型默认声明为float64类型
	3.浮点型常用有两种表示形式
		十进制数形式，如：5.12 .512（必须有小数点）
		科学计数法形式，如：5.1234e2 = 5.12 * 10的2次方 5.12E-2 = 5.12/10的2次方
	4.通常情况下，应该使用float64，因为它比float32更精确.【开发中，没有特殊要求使用float64】


#字符类型（char）
基本介绍：
	Golang中没有专门的字符类型，如果要存储单个字符（字母），一般使用byte来保存
	字符串就是一串固定长度的字符连接起来的字符序列。Go的字符串是由单个字节连接起来的。也就是说对于传统的字符串是由字符组成的，而
	Go的字符串不同，他是由字节组成的。

	1.如果我们保存的字符在ASCII表，比如[0-1,a-z,A-Z...]直接可以保存到byte
	2.如果我们保存的字符对应码值大于255，这时我们可以考虑使用int类型保存
	3.如果我们需要安装字符的方式输出，这时我们需要格式化输出，既 fmt.Printf("%c",c1)

字符类型使用细节：
	1.字符常量是用单引号('')括起来的单个字符。例如：var c1 byte = 'a' var2 c2 int = '中' var c3 byte = '9'
	2.Go中允许使用转义字符'\'来将其后的字符转变为特殊字符型常量。例如：var c3 char = '\n' //'\n'表示换行符
	3.Go语言的字符使用UTF-8编码。英文字母  一个字节   汉字 3个字节
	4.在Go中，字符的本质是一个整数，直接输出时，是该字符对应的UTF-8编码的码值。
	5.可以直接给某个变量赋一个数字，然后按格式化输出时%c，会输出该数字对应的unicode字符
	6.字符类型是可以进行运算的，相当于一个整数，因为它都对应有Unicode码。

字符类型本质探讨
1. 字符型存储到计算机中，需要将字符对应的码值（整数找出来）
	存储： 字符--->对应码值--->二进制--->存储
	读取： 二进制--->码值--->字符--->读取
2.字符和码值的对应关系是通过字符编码表决定的是规定好的
3.Go语言的编码都统一成了utf-8.非常的方便，很统一，再也没有编码乱码的困扰了


#布尔类型（bool）
基本介绍
1.布尔类型也叫bool类型，bool类型数据只允许取值true和false
2.bool类型占一个字节
3.boolean 类型始于逻辑运算，一般用于程序流程控制


#字符串类型（string）
基本介绍
1.字符串就是一串固定长度的字符连接起来的字符序列。Go的字符串是由单个字节连接起来的。Go语言的字符串的字节使用UTF-8编码表示Unicode文本

使用细节：
1.Go语言的字符串的字节使用UTF-8编码表示Unicode文本，这样Golang统一使用UTF-8编码，中文乱码问题不会再困扰程序员
2.字符串一旦赋值了，字符串就不能修改了。在GO中字符串是不可变的
3.字符串的两种表示形式
  1）双引号，会失败转义字符
  2）反引号：以字符串的原生形式输出，包括换行和特殊字符，可以实现防止攻击、输出源代码等效果
4.当一个拼接的操作很长时，怎么办，可以分行写. "+"必须放在上一行。因为go会在每行后面加一个";"


基本数据类型的默认值
基本介绍：
	在go中，数据类型都有一个默认值，当程序员没有赋值时，就会保留默认值，在go中，默认值又叫零值
	基本数据默认值如下：
	var a int  // 0
	var b float32 // 0
	var c float64 // 0
	var d bool // false
	var e string // ""


#基本数据类型的相互转换
基本介绍
	Golang和java /C不同，GO在不同类型的变量之间赋值时需要显式转换。也就是说Golang中数据类型不能自动转换
基本语法
	表达式T（v）将值v转换为类型T
	案例演示：
	func main() {
	var i int32 = 100
	//希望将1 => float
	var n1 float32 = float32(i)
	var n2 int8 = int8(i)
	var n3 int64 = int64(i) //低精度->高精度

	fmt.Printf("i=%v n1=%v n2=%v n3=%v\n",i,n1,n2,n3)
	}
细节说明
	1.Go中，数据类型的转换可以是从表示范围小->表示范围大，也可以范围大->范围小
	2.被转换的是变量存储的数据（既值），变量本身的数据类型并没有变化！
	3.在转换中，比如将int64转换为int8，编译时不会报错，只是转换的结果是按溢出处理，和我们希望的不一样。因此在转换时，需要考虑范围。



基本数据类型和string的转换
方式1. fmt.Sprint("%参数",表达式)
函数介绍：

参数需要和表达式的数据类型

func Sprintf(format string, a ...interface{}) string
Sprintf根据format参数生成格式化的字符串并返回该字符串。 
	



*/